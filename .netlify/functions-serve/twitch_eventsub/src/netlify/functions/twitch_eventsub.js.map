{
  "version": 3,
  "sources": ["../../../../../../Users/aydrian/Developer/crl-streams/netlify/functions/twitch_eventsub.js", "../../../../../../Users/aydrian/Developer/crl-streams/netlify/lib/withVerifyTwitch.js"],
  "sourceRoot": "/var/folders/g2/hc75gn0j13q3nrj1cl_0vmfm0000gn/T/tmp-21129-lD4HLh8dLlaM",
  "sourcesContent": ["import withVerifyTwitch from \"../lib/withVerifyTwitch\";\n\nasync function twitchHandler(event, context) {\n  if (event.httpMethod !== \"POST\") {\n    return {\n      statusCode: 405,\n      headers: { Allow: \"POST\" },\n      body: \"Method Not Allowed\"\n    };\n  }\n\n  const body = JSON.parse(event.body);\n  const messageType = event.headers[\"twitch-eventsub-message-type\"];\n  if (messageType === \"webhook_callback_verification\") {\n    return {\n      statusCode: 200,\n      body: body.challenge\n    };\n  }\n\n  return {\n    statusCode: 200,\n    body: JSON.stringify({ message: \"Hello World\" })\n  };\n}\n\nexport const handler = withVerifyTwitch(twitchHandler);\n", "import crypto from \"crypto\";\nconst twitchSigningSecret = process.env.TWITCH_SIGNING_SECRET;\n\nconst withVerifyTwitch = (handler) => {\n  return async (event, context) => {\n    const messageId = event.headers[\"twitch-eventsub-message-id\"];\n    const timestamp = event.headers[\"twitch-eventsub-message-timestamp\"];\n    const messageSignature = event.headers[\"twitch-eventsub-message-signature\"];\n    const time = Math.floor(new Date().getTime() / 1000);\n\n    if (!twitchSigningSecret) {\n      console.log(`Twitch signing secret is empty.`);\n      return { statusCode: 422, body: \"Signature verification failed.\" };\n    }\n\n    if (Math.abs(time - timestamp) > 600) {\n      // needs to be < 10 minutes\n      console.log(\n        `Verification Failed: timestamp > 10 minutes. Message Id: ${messageId}.`\n      );\n      return { statusCode: 422, body: \"Ignore this request.\" };\n    }\n\n    const computedSignature =\n      \"sha256=\" +\n      crypto\n        .createHmac(\"sha256\", twitchSigningSecret)\n        .update(messageId + timestamp + event.body)\n        .digest(\"hex\");\n\n    if (messageSignature !== computedSignature) {\n      console.log(`Provided signature does not match computed signature.`);\n      console.log(`Message ${messageId} Signature: `, messageSignature);\n      console.log(\n        `Message ${messageId} Computed Signature: ${computedSignature}`\n      );\n      return { statusCode: 422, body: \"Signature verification failed.\" };\n    }\n\n    return handler(event, context);\n  };\n};\n\nexport default withVerifyTwitch;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;;;ACAA,oBAAmB;AACnB,IAAM,sBAAsB,QAAQ,IAAI;AAExC,IAAM,mBAAmB,CAAC,aAAY;AACpC,SAAO,OAAO,OAAO,YAAY;AAC/B,UAAM,YAAY,MAAM,QAAQ;AAChC,UAAM,YAAY,MAAM,QAAQ;AAChC,UAAM,mBAAmB,MAAM,QAAQ;AACvC,UAAM,OAAO,KAAK,MAAM,IAAI,OAAO,YAAY;AAE/C,QAAI,CAAC,qBAAqB;AACxB,cAAQ,IAAI;AACZ,aAAO,EAAE,YAAY,KAAK,MAAM;AAAA;AAGlC,QAAI,KAAK,IAAI,OAAO,aAAa,KAAK;AAEpC,cAAQ,IACN,4DAA4D;AAE9D,aAAO,EAAE,YAAY,KAAK,MAAM;AAAA;AAGlC,UAAM,oBACJ,YACA,sBACG,WAAW,UAAU,qBACrB,OAAO,YAAY,YAAY,MAAM,MACrC,OAAO;AAEZ,QAAI,qBAAqB,mBAAmB;AAC1C,cAAQ,IAAI;AACZ,cAAQ,IAAI,WAAW,yBAAyB;AAChD,cAAQ,IACN,WAAW,iCAAiC;AAE9C,aAAO,EAAE,YAAY,KAAK,MAAM;AAAA;AAGlC,WAAO,SAAQ,OAAO;AAAA;AAAA;AAI1B,IAAO,2BAAQ;;;ADzCf,6BAA6B,OAAO,SAAS;AAC3C,MAAI,MAAM,eAAe,QAAQ;AAC/B,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS,EAAE,OAAO;AAAA,MAClB,MAAM;AAAA;AAAA;AAIV,QAAM,OAAO,KAAK,MAAM,MAAM;AAC9B,QAAM,cAAc,MAAM,QAAQ;AAClC,MAAI,gBAAgB,iCAAiC;AACnD,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK;AAAA;AAAA;AAIf,SAAO;AAAA,IACL,YAAY;AAAA,IACZ,MAAM,KAAK,UAAU,EAAE,SAAS;AAAA;AAAA;AAI7B,IAAM,UAAU,yBAAiB;",
  "names": []
}
